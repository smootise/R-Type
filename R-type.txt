Network Working Group                                           C.bajdek
Request for Comments: 4242                                       Epitech
Obsoletes: none                                            November 2014
Category : Standarts Track                                           

                             R-Type Protocol                           

Abstract

   This protocol is intended to povide the R-Type service, and be used
   between clients and servers on host computers. 

Status of This Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.

Copyright Notice

   Copyright (C) Epitech (November 2014).  All Rights Reserved.

Table of Contents

   1. Introduction .....................................................2
      1.1. Conventions Used in This Document ...........................2
   2. Pre Game Session Management ......................................2
   3. Pre Game Message Exchanges .......................................2
   4. Pre Game Data Unit Format ........................................3
   5. Pre Game Request & Responses Values ..............................4
      5.1. Request Values ..............................................4
      5.2. Responses Values ............................................4
	  5.3. Login Request ...............................................4
	  5.4  Get Rooms request ...........................................5
	  5.5. Join Room Request ...........................................6
	  5.6. Create Room Request .........................................6
	  5.7. Room Informations ...........................................7
	  5.8. Other Requests ..............................................7
   6. In Game Session Management .......................................8















   
Bajdek                       Standarts tracks                    [page 1]

RFC 4242                     R-Type Protocol                November 2014

1.   Introduction

   This Document describes how the R-Type project is runing using both
   TCP and UDP client-server connection. TCP is described in [RFC0793].
   UDP is described in [RFC0768].

   1.1.   Conventions Used in This Document

      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in 
      this document are to be interpreted as described in [RFC2119].

2.   Pre Game Session Management

   The in-game protocol used for data transfer is UDP, however, all the
   pre game session including Connection, Authentication, Room creation
   , Room joining and Game Launching, are to be processed using the TCP
   protocol. The TCP connection occurs between two peers, one that 
   initiate the connection request and one that responds to the
   connection request. The initiating peer is called the "client", and
   the responding peer is called the "server". An R-Type server must
   listen for TCP connection on a standart port (4242).

   The client MUST issue a connection to the server specifying the 
   standart port (4242). The server MAY accept or not the new client,
   depending on several parameters (server's occupation, availlable CPU,
   ...)

   At Session start, the client MUST send a LOGIN command (wich contains
   the nickname of the user). The client nickname MUST be unique on 
   the server, if this is not the case, the server SHALL send a NOK    
   response to the client so that he can try again using another name.

   The session is normally ended by the client sending the LOGOUT
   command. A server receiving the LOGOUT command MUST end the session
   and close the TCP connection. A client MAY end a session in some
   cases (game crash, unavaillable services ...).

   A server MAY limit the life span of an established TCP connection.
   Sessions that are inactive for more than a server-defined period
   MAY be ended by a server.  A server MAY also close
   TCP connections that have been open and active for longer than
   a server-defined period.

3.   Pre Game Messages Exchanges

   All Pre Game messages are in form of paquets as defined on the
   section 4. The messages are initiated by the client in the form
   of commands. A R-Type server MUST return a well formated response
   to any command he receives on the same TCP connection that carried
   the command. The clients commands and server responses are defined in
   section 5.



   
Bajdek                       Standarts tracks                    [page 2]

RFC 4242                     R-Type Protocol                November 2014
   
   General client-server message exhanging using TCP tropsport is
   illustrated Figure 1.




                       Client                  Server
                  |                                     |
                  |                Connect              |
                  | >>------------------------------->> |
                  |                                     |
                  |             Send Login              |
                  | >>------------------------------->> |
                  |                                     |
                  |             Send Response           |
                  | <<-------------------------------<< |
                  |                                     |
                  |             Send Command            |
                  | >>------------------------------->> |
                  |                                     |
                  |             Send Response           |
                  | <<-------------------------------<< |
                  |                                     |
                  |             Send LOGOUT             |
                  | >>------------------------------->> |
                  |                                     |
                  |     Send Response & Disconnect      |
                  | <<-------------------------------<< |
                  |                                     |

               Figure 1: TCP Client-Server Message Exchange

4.   Pre Game Data Unit Format

   The Pre Game data unit contains three fields :
   A 32 bits field containing the Request/Response Type (see section 5).
   A 32 bits field containing the length of the Additional Data field
   measured in octects.
   An additional Data field.

        Data Unit Format (one tick mark represents one bit position):

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                      Request/Response Type                    |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                     Additional Data Length                    |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                        Additional Data                        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Request Type (32 bits): The type of the request initiated by the
   client. Different request types are defined in section 5.

   Additional Data Length (32 bits): The length of the Additional Data
   measured in octects int network (big endian)	byte order.   

   Additional Data (variable length): A field containing any additional
   data necessary for the intended request/response.

   Note that the additional data length (and therefore the additonal data
   size MUST NOT exceed 256 bytes.
 


Bajdek                       Standarts tracks                    [page 3]

RFC 4242                     R-Type Protocol                November 2014

5.   Pre Game Request & Responses Values
 
   5.1.   Request Values      
 
      This section describes the values of the field "Request/Response
      Type" (see section 4), for the Request part. The Request are
      initiated by the client only.

      Request Code:          Request Meaning:           Request Value:
           
        LOGIN           To register to the server              1
        LOGOUT           Disconnect from server                2
	  GET_ROOMS			To get the list of rooms			   3
      JOIN_ROOM            Join a game room                    4
      LEAVE_ROOM           Leave a game room                   5
      CREATE_ROOM          Create a game room                  6
      START_GAME             Start the game                    7


   5.2.   Responses Values

      This session describes the values of the field "Request/Response
      Type" (see section 4), for the Response part. The responses are
      sent by the server only and MAY respond to a client Request.
      The responses may also be used to inform the client about the
      state of the room (if he is in a room of course).

      Response Code:          Response Meaning:           Response Value:
           
        OK                The request is fullfilled            1
        NOK             The request is not fullfilled          2
        BUSY                  The server is busy               3
      ADD_ALLY       Add an ally in the current room           4
    REMOVE_ALLY    Remove an ally from the current room        5      

   5.3.   Login Request  
      
	  The LOGIN request MUST be the first request that the client 
	  makes. As long as the client has not received an OK response 
	  to his LOGIN request, he MUST try again with another name.
	  
      The client SHOULD NOT send other request type if he has not
	  fullfilled the LOGIN request, as the server's answer will 
	  always be NOK if the client is not logged in.
	  

	  
	  
	  
	  
	  
	  
	  
	  

	  
Bajdek                       Standarts tracks                    [page 4]

RFC 4242                     R-Type Protocol                November 2014

      The LOGIN request MUST be formated like the following example :

	    Data Unit Format (one tick mark represents one bit position):

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                            LOGIN                              |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                     	     12                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         USERNAMETEST                          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   5.5.   Get Rooms Request
	  
      The GET_ROOMS request is used by the client to get the list of the
	  current availlable rooms.
	  
	  This request does not require the use of the "Additional Data" 
	  field, if you want more informations about this particular type
	  of requests, see section 5.8.
	  
	  The server's answer will contain all the rooms that are availlable
	  separated by a "|" (to avoid issues, this character MUST be 
	  forbidden in a room name).
	  
	  The server's answer SHALL be formated like the following example :
	  
	         0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                              OK                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                     	     17                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                        ROOM1|ROOM2|ROOM3                      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	  
	  Of course, this example assumes that the request is valid and the
	  anwser is OK.
	  If it is not the case, the server will return a NOK paquet with no
	  "Additional Data"
	  
	  
	  
	  
	  	  
Bajdek                       Standarts tracks                    [page 5]

RFC 4242                     R-Type Protocol                November 2014

   5.5.   Join Room Request
        
      The JOIN_ROOM request MUST be sent only when you are not already in	  
      a room. If you are already in a room and wish to join another one,
      you SHOULD send a LEAVE_ROOM request before sending the JOIN_ROOM 
	  one.

      The JOIN_ROOM request MUST be formated like the following example :

	    Data Unit Format (one tick mark represents one bit position):

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                          JOIN_ROOM                            |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                     	     12                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         ROOMNAMETEST                          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

	  Each room has a maximum of 4 clients in it. This means that even
	  if your request contains a valid room name, you MAY receive a NOK
	  answer from the server if the room is full.
	  
      Once you have joined the room (meaning once the server has answered
      an OK response to your request). You MAY receive asynchronous
      informations about what is happening in the room you are (i.e. if
	  someone leave/join the room). For more informations about this 
	  matter, see section 5.7.

   5.6.   Create Room Request

      The CREATE_ROOM request MUST be sent only when you are not already
	  in a room. If you are already in a room and wish to create one, you
      SHOULD send a LEAVE_ROOM request before sending the JOIN_ROOM one.
   
    The CREATE_ROOM request MUST be formated like the following example :

	    Data Unit Format (one tick mark represents one bit position):

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         CREATE_ROOM                           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                     	     12                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         ROOMNAMETEST                          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      You MUST use a room name that is not already in use on the server.
      You SHOULD NOT use other characters than the one defined in the 
      ASCII format. Also, you MUST NOT use the character "|" in your
      room's name, as it is used for separation purposes.
   
Bajdek                       Standarts tracks                    [page 6]

RFC 4242                     R-Type Protocol                November 2014

   5.7.   Room Informations
   
      When you join/create a room, you MAY receive informations about
      what is going on in your room.
   
      For every client present in the room you joined, you will receive
      an ADD_ALLY request from the server.
   
      Everytime a new client join the room, you will receive an
      ADD_ALLY request from the server.
   
      Everytime a client leaves the room, you will receive an 
      REMOVE_ALLY request from the server.
   
      The ADD_ALLY and REMOVE_ALLY requests will be formated like 
      the following example :
   
   	    Data Unit Format (one tick mark represents one bit position):

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                     ADD_ALLY/REMOVE_ALLY                      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                     	     12                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         ALLYNAMETEST                          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  
      Once a room is empty, it is automatically deleted by the server.
   
      This means that if a client creates a room, and then leave it while
	  he is alone in it, he will not be able to (re)join it after. He will 
	  have to create a new one.
   
   5.8.   Other Requests
   
      This section describes the expected behavior of every other request
	  that are not defined above (in a 5.x section).
	  
	  For all theses requests, the "Additional Data" field MUST NOT be
	  used. Therefore all theses requests must fill the "Data Length"
	  field with the value 0, as in the following example :
	  
	    Data Unit Format (one tick mark represents one bit position):

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |               GET_ROOMS/LOGOUT/LEAVE_ROOM/START_GAME          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                     	     0                                |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	  


Bajdek                       Standarts tracks                    [page 7]   
	  
RFC 4242                     R-Type Protocol                November 2014	  
	  
	  6.   In Game Session Management






















































	  
Bajdek                       Standarts tracks                    [page 8]